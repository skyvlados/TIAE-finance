<div class="content">
  <h1>Import Operations From Excel</h1>
  <h2>Requirements</h2>
<ul>
  <li>You can import your operations if they are in an excel file format .xls.</li>
  <li>You can dowload your operations from Tinkoff bank.</li>
  <li>You can also import transactions from another bank, but the excel file must contain 4 columns with specific names and these columns must be filled.</li>
  <li>1 column - 'Дата операции', 5 column - 'Сумма операции', 6 - 'Валюта операции', 10 - 'Категория' </li>
</ul>
</div>

<%= form_with url: create_opertaions_from_excel_path, multipart: true do %>
  <div id="file-js-example" class="file has-name">
    <div class="field is-grouped">
      <p class="control">
        <label class="file-label">
          <%= file_field_tag :file, class: "file-input"%>
            <span class="file-cta">
              <span class="file-icon">
                <i class="fas fa-upload"></i>
              </span>
              <span class="file-label">
                Choose a file…
              </span>
            </span>
          <span class="file-name">
            No file uploaded
          </span>
        </label>
      </p>
      <p class="control">
        <%= submit_tag "Upload", class: "button is-success" %>
      </p>
      <p class="control">
        <%= back_to_list_button(operations_path(cookies[:operations_filters].then { JSON.parse(_1) if _1 } )) %>
      </p>
    </div>
  </div>
<% end %>

<script>
  const fileInput = document.querySelector('#file-js-example input[type=file]');
  fileInput.onchange = () => {
    if (fileInput.files.length > 0) {
      const fileName = document.querySelector('#file-js-example .file-name');
      fileName.textContent = fileInput.files[0].name;
    }
  }
</script>
